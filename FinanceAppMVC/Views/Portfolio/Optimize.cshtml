@using PortfolioQuadraticOptimization.DataContracts

@{    
    ViewBag.Title = "Optimize";
    Dictionary<string, double> Results = ViewBag.Results as Dictionary<string, double>;
    OptimizationResult[] efficientFrontier = ViewBag.EfficientFrontier as OptimizationResult[];
}

<script src="/Scripts/highcharts.js" type="text/javascript"></script>
<script type="text/javascript">
    var chart1;
    $(document).ready(function () {
        chart1 = new Highcharts.Chart({
            chart: {
                renderTo: 'chartContainer',
                zoomType: 'x',
                spacingRight: 20
            },
            title: {
                text: 'Efficiency Frontier'
            },
            subtitle: {
                text: 'Click and drag in the plot area to zoom in'
            },
            tooltip: {
                shared: true,
            },
            legend: {
                enabled: false
            },
            yAxis: {
                title: {
                    text: 'Mean Return Rates (%)'
                },
                startOnTick: false,
                showFirstLabel: false
            },
            plotOptions: {
                area: {
                    fillColor: {
                        linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1},
                        stops: [
                            [0, Highcharts.getOptions().colors[0]],
                            [1, 'rgba(2,0,0,0)']
                        ]
                    },
                    lineWidth: 1,
                    marker: {
                        enabled: false,
                        states: {
                            hover: {
                                enabled: true,
                                radius: 5
                            }
                        }
                    },
                    shadow: false,
                    states: {
                        hover: {
                            lineWidth: 1
                        }
                    }
                }
            },
            series: [{
                type: 'line',
                name: 'Efficient Frontier',
                data: [

                    @foreach (var entry in efficientFrontier)
                    {
                        @String.Format("[{0:F4}, {1:F4}], ", entry.StandardDeviation * 100, entry.ExpectedReturn * 100);
                    }
                ]
            }]
        });
    });
</script>

<h2>Optimization Results</h2>

<h3>Allocations required for minimum risk:</h3>
<table>
@foreach (string key in Results.Keys)
{
    <tr>
        <td>@key</td>
        <td>@String.Format("{0:P4}", Results[key])</td>
    </tr>
}
</table>

<p>This allocation will give a rate of return of @String.Format("{0:P4}", ViewBag.ExpectedRateOfReturn)</p>

<div id="chartContainer" />